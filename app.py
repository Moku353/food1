# pip install transformers Pillow torch streamlit into the shell

import os
from transformers import BlipProcessor, BlipForConditionalGeneration, pipeline
from PIL import Image
import torch
import streamlit as st

# === Step 1: Set up Hugging Face Token ===
os.environ["HF_TOKEN"] = st.secrets['HF_TOKEN']  # Demo token for workshop

st.title("Interactive Q&A App")

questions = [
    "What is your favorite food?",
    "How often do you cook at home?",
    "Do you have any dietary restrictions?"
]

for question in questions:
    if st.button(question):
        st.write(f"You clicked: {question}")

st.header("Upload an Image")
uploaded_file = st.file_uploader("Choose an image...", type=["jpg", "jpeg", "png"])
if uploaded_file is not None:
    image = Image.open(uploaded_file)
    st.image(image, caption="Uploaded Image", use_column_width=True)

# === Step 2: Load Image (change filename as needed) ===
image_path = "sample.jpg"  # Replace with your uploaded image path
image = Image.open(image_path).convert("RGB")

# === Step 3: Load BLIP model and generate caption ===
processor = BlipProcessor.from_pretrained("Salesforce/blip-image-captioning-base")
model = BlipForConditionalGeneration.from_pretrained("Salesforce/blip-image-captioning-base")

inputs = processor(images=image, return_tensors="pt")
with torch.no_grad():
    output = model.generate(**inputs)
    caption = processor.decode(output[0], skip_special_tokens=True)

print("üìù Caption generated by BLIP model:")
print(caption)

# === Step 4: Use QA model to extract ingredients and steps ===
qa_pipeline = pipeline("question-answering", model="deepset/roberta-base-squad2")

questions = [
    "What are the ingredients?",
    "What are the cooking actions?"
]

print("\nüîç AI Responses:")
for q in questions:
    result = qa_pipeline(question=q, context=caption)
    print(f"\nQ: {q}\nA: {result['answer']}")
